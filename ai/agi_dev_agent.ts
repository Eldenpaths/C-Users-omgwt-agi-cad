// ai/agi_dev_agent.ts  –  Phase 8A Self-Build Bundle
// Local autonomous agent that writes starter code & docs safely.

import { Anthropic } from "@anthropic-ai/sdk";
import { Octokit } from "@octokit/rest";
import { execSync } from "child_process";
import { readFileSync, writeFileSync, existsSync, mkdirSync } from "fs";
import path from "path";

interface Task {
  id: string;
  description: string;
  spec?: string;
  files: string[];
}

interface AgentState {
  sessionId: string;
  phase: string;
  completed: number;
  heartbeat: { status: "idle" | "in_progress" | "error"; lastPing: number };
}

export class AGIDevAgent {
  private anthropic: Anthropic;
  private github: Octokit;
  private repoPath: string;
  private state: AgentState;

  constructor(
    anthropicKey: string = "none",
    githubToken: string = "none",
    repoPath: string = process.cwd()
  ) {
    this.anthropic = new Anthropic({ apiKey: anthropicKey });
    this.github = new Octokit({ auth: githubToken });
    this.repoPath = repoPath;
    this.state = {
      sessionId: `phase8A-${Date.now()}`,
      phase: "phase-8A",
      completed: 0,
      heartbeat: { status: "idle", lastPing: Date.now() },
    };
    console.log(`⚙️ AGI-CAD Phase 8A Agent ready (offline mode)`);
    this.startHeartbeat();
  }

  /** ─────────────────────────────── Sprint loop ─────────────────────────────── */
  async startSprint(config: { goal: string; tasks: Task[] }) {
    console.log(`🚀 Sprint goal: ${config.goal}`);
    for (const task of config.tasks) await this.executeTask(task);
    console.log("✅ Sprint complete");
  }

  /** ─────────────────────────────── Execute single task ─────────────────────── */
  async executeTask(task: Task) {
    console.log(`\n🧩 ${task.description}`);
    this.state.heartbeat.status = "in_progress";

    // Ensure output folder
    const autoDir = path.join(this.repoPath, "auto_commits");
    if (!existsSync(autoDir)) mkdirSync(autoDir);

    for (const file of task.files) {
      const fullPath = path.join(autoDir, file);
      const dir = path.dirname(fullPath);
      if (!existsSync(dir)) mkdirSync(dir, { recursive: true });

      const template = this.writeTemplate(file, task.description);
      writeFileSync(fullPath, template);
      console.log(`  ✨ wrote ${file}`);
    }

    // Optional doc generation
    this.generateDocs(task);

    this.gitSafeCommit(task.description);
    this.state.completed++;
    this.state.heartbeat.status = "idle";
  }

  /** ─────────────────────────────── Template Writer ─────────────────────────── */
  writeTemplate(file: string, description: string): string {
    const ext = path.extname(file);
    const base = path.basename(file);

    const headers = `/**\n * Auto-generated by AGI-CAD Phase 8A\n * File: ${base}\n * Purpose: ${description}\n */\n\n`;

    if (ext === ".ts" || ext === ".tsx")
      return (
        headers +
        `export function ${base.replace(/\W/g, "_")}_Template(){\n  console.log("Stub for ${description}");\n  return null;\n}\n`
      );
    if (ext === ".py")
      return (
        headers +
        `def main():\n    print("Placeholder for ${description}")\n\nif __name__ == "__main__":\n    main()\n`
      );
    if (ext === ".json")
      return headers + JSON.stringify({ description, phase: "8A" }, null, 2);
    return headers + `# Placeholder for ${description}\n`;
  }

  /** ─────────────────────────────── Docs Generator ──────────────────────────── */
  generateDocs(task: Task) {
    const docsDir = path.join(this.repoPath, "docs", "auto");
    if (!existsSync(docsDir)) mkdirSync(docsDir, { recursive: true });
    const docPath = path.join(docsDir, `${task.id}.md`);
    const content = `# ${task.description}\n\n**Files:**\n${task.files
      .map((f) => `- ${f}`)
      .join("\n")}\n\nGenerated ${new Date().toISOString()} by Phase 8A.`;
    writeFileSync(docPath, content);
  }

  /** ─────────────────────────────── Git Ops (Safe) ──────────────────────────── */
  gitSafeCommit(msg: string) {
    try {
      execSync("git add .", { cwd: this.repoPath });
      execSync(`git commit -m "auto: ${msg}"`, { cwd: this.repoPath });
      console.log(`  💾 committed: ${msg}`);
    } catch {
      console.log("  ⚠️ no git commit made (detached or unchanged)");
    }
  }

  /** ─────────────────────────────── Heartbeat ───────────────────────────────── */
  startHeartbeat() {
    setInterval(() => {
      this.state.heartbeat.lastPing = Date.now();
      console.log(
        `💓  heartbeat: ${this.state.heartbeat.status} | done ${this.state.completed}`
      );
    }, 5000);
  }
}

/* ─────────────────────────────── CLI Runner ─────────────────────────────── */
if (require.main === module) {
  try {
    const cfg = JSON.parse(
      readFileSync(path.join(process.cwd(), ".agi-cad", "sprint-config.json"), "utf-8")
    );
    const agent = new AGIDevAgent();
    agent.startSprint(cfg);
  } catch (err) {
    console.error("❌ Failed to start sprint:", err);
  }
}

